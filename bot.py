import logging
import time
from telebot import apihelper
import psycopg2
import telebot
from telebot import types
import os
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from database import insert_product, get_all_categories, get_products_by_category, get_product_by_id, add_to_cart, \
    get_cart_items, clear_cart, save_order, get_user_info, get_order_info
from config import *
from functools import partial
from admin import add_category, add_product
from admin import bot as admin_bot

bot = admin_bot

logging.basicConfig(level=logging.INFO)


# --------------------------------------------------------------------------------------------------------

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫–∞ "–ö–∞—Ç–∞–ª–æ–≥"
@bot.message_handler(commands=['start'])
def send_welcome(message):
    markup = types.InlineKeyboardMarkup()
    catalog_button = types.InlineKeyboardButton("–ö–∞—Ç–∞–ª–æ–≥", callback_data="catalog")
    markup.add(catalog_button)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∏–∫–µ—Ä–∞ –∏–∑ —Ñ–∞–π–ª–∞
    sticker_path = os.path.join(PHOTOS_DIR, 'AnimatedSticker.tgs')
    if os.path.exists(sticker_path):
        with open(sticker_path, 'rb') as sticker:
            bot.send_sticker(message.chat.id, sticker)
    else:
        bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Ç–∏–∫–µ—Ä.")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if not is_user_registered(message.chat.id):
        register_user(message)

    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω PANDA SHOP üêº", reply_markup=markup)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def is_user_registered(chat_id):
    with psycopg2.connect(user=DB_USER, password=DB_PASSWORD, host=DB_HOST, port=DB_PORT,
                          database=DB_NAME) as connection:
        with connection.cursor() as cursor:
            cursor.execute("SELECT * FROM users WHERE chat_id = %s", (chat_id,))
            return cursor.fetchone() is not None


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def register_user(message):
    chat_id = message.chat.id
    username = message.chat.username
    first_name = message.chat.first_name
    last_name = message.chat.last_name

    with psycopg2.connect(user=DB_USER, password=DB_PASSWORD, host=DB_HOST, port=DB_PORT,
                          database=DB_NAME) as connection:
        with connection.cursor() as cursor:
            cursor.execute("INSERT INTO users (username, first_name, last_name, chat_id) VALUES (%s, %s, %s, %s)",
                           (username, first_name, last_name, chat_id))
            connection.commit()


@bot.message_handler(commands=['stop'])
def handle_stop(message):
    markup = types.ReplyKeyboardRemove()
    bot.send_message(message.chat.id, "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞.", reply_markup=markup)


# --------------------------------------------------------------------------------------------------------


@bot.callback_query_handler(func=lambda call: True)
def handle_query(call):
    logging.info(f"Handling callback query with data: {call.data}")

    if call.data == "catalog":
        send_catalog(call)
    elif call.data.startswith("add_to_cart_"):
        handle_add_to_cart(call)
    elif call.data.startswith("category_"):
        process_category_callback(call)
    elif call.data == "back_catalog":
        send_catalog(call)
    elif call.data == "view_cart":
        handle_view_cart(call)
    elif call.data == "clear_cart":
        handle_clear_cart(call)
    elif call.data.startswith("order_"):
        if call.data == "order_0":
            handle_order_from_cart(call)
        else:
            handle_order(call)
    elif call.data.startswith("confirm_order_"):
        handle_confirm_order(call)
    elif call.data == "cancel_order":
        handle_cancel_order(call)
    elif call.data.startswith("product_"):
        send_product_info(call, call.data)
    elif call.data.startswith("pay_by_"):
        handle_payment_method(call)
    else:
        bot.send_message(call.message.chat.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")








# --------------------------------------------------------------------------------------------------------

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤
def send_catalog(call=None):
    markup = types.InlineKeyboardMarkup()
    categories = get_all_categories()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

    if categories:
        for category in categories:
            category_button = types.InlineKeyboardButton(category[1], callback_data=f"category_{category[0]}")
            markup.add(category_button)

    back_button = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_catalog")
    markup.add(back_button)

    if call:
        try:
            bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        except Exception as e:
            print(f"Error deleting message: {e}")

    bot.send_message(call.message.chat.id, "–ß—Ç–æ –±—É–¥–µ–º –ø–æ–∫—É–ø–∞—Ç—å?", reply_markup=markup) if call else None


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith('category_'))
def process_category_callback(call):
    category_id = int(call.data.split('_')[1])
    products = get_products_by_category(category_id)

    if products:
        markup = types.InlineKeyboardMarkup()
        for product in products:
            product_button = types.InlineKeyboardButton(f"{product[1]} - {product[3]} —Ç–≥.", callback_data=f"product_{product[0]}")
            markup.add(product_button)


        bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=markup)
    else:
        bot.send_message(call.message.chat.id, "–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.")


@bot.callback_query_handler(func=lambda call: call.data == 'back_to_catalog')
def back_to_catalog_callback(call):
    send_catalog(call)



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ
def send_product_info(call, product_id_str):
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
        if not product_id_str.startswith("product_"):
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ.")

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ–≤—É—é —á–∞—Å—Ç—å –∏–∑ —Å—Ç—Ä–æ–∫–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞
        product_id = int(product_id_str.split('_')[1])
        print(f"Fetching product info for ID: {product_id}")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        with psycopg2.connect(user=DB_USER, password=DB_PASSWORD, host=DB_HOST, port=DB_PORT,
                              database=DB_NAME) as connection:
            with connection.cursor() as cursor:
                cursor.execute("SELECT * FROM products WHERE id = %s", (product_id,))
                product = cursor.fetchone()

                if product:
                    product_name = product[1]
                    product_price = product[3]
                    product_sizes = product[4]
                    product_photo_filename = product[5]

                    product_photo_url = os.path.join(PHOTOS_DIR, product_photo_filename)

                    print(f"Product photo URL: {product_photo_url}")

                    with open(product_photo_url, 'rb') as photo_file:
                        sizes_text = ", ".join(product_sizes)

                        markup = types.InlineKeyboardMarkup()

                        add_to_cart_button = types.InlineKeyboardButton("–í –∫–æ—Ä–∑–∏–Ω—É",
                                                                        callback_data=f"add_to_cart_{product_id}")
                        markup.row(add_to_cart_button)

                        bot.send_photo(call.message.chat.id, photo_file,
                                       caption=f"ID —Ç–æ–≤–∞—Ä–∞: {product_id}\n\n–ù–∞–∑–≤–∞–Ω–∏–µ: <b>{product_name}</b>\n\n–¶–µ–Ω–∞: {product_price} —Ç–≥.\n\n–†–∞–∑–º–µ—Ä—ã: {sizes_text}",
                                       parse_mode='HTML', reply_markup=markup)

                else:
                    bot.send_message(call.message.chat.id, "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    except ValueError as e:
        bot.send_message(call.message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}")
    except (Exception, psycopg2.Error) as error:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥—É–∫—Ç–µ: {error}")
        bot.send_message(call.message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ.")




# --------------------------------------------------------------------------------------------------------
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
def handle_order_from_cart(call):
    chat_id = call.message.chat.id
    logging.info(f"User {chat_id} requested to order from cart")

    items = get_cart_items(chat_id)
    if not items:
        bot.send_message(chat_id, "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        return

    order_summary = []
    total_amount = 0

    for item in items:
        product_id, name, price, quantity = item
        try:
            price = float(price)
            quantity = int(quantity)
            total_amount += price * quantity
            order_summary.append(f"{name} - {quantity} —à—Ç. - {price} —Ç–≥. –∑–∞ —à—Ç.")
        except ValueError:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {product_id}.")
            order_summary.append(f"{name} - {quantity} —à—Ç.")

    order_summary_text = "\n".join(order_summary)

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    markup.add(types.KeyboardButton('–û–ø–ª–∞—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ–π'), types.KeyboardButton('–û–ø–ª–∞—Ç–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π'))

    bot.send_message(chat_id,
                     f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑:\n\n"
                     f"{order_summary_text}\n\n"
                     f"–ò—Ç–æ–≥–æ: {total_amount:.2f} —Ç–≥. | {total_amount/475:.2f} USDT.\n\n"
                     f"1 USDT ~ 475 —Ç–≥.\n"
                     "\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã.",
                     reply_markup=markup)

    bot.register_next_step_handler(call.message, handle_payment_method_step, order_summary_text, total_amount)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
def handle_payment_method_step(message, order_summary, total_amount):
    chat_id = message.chat.id
    payment_method = message.text

    if payment_method == '–û–ø–ª–∞—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ–π':
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –æ –ø–ª–∞—Ç–µ–∂–µ.", reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, handle_payment_receipt_step, order_summary, total_amount)
    elif payment_method == '–û–ø–ª–∞—Ç–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π':
        bot.send_message(chat_id, "–î–ª—è –æ–ø–ª–∞—Ç—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ—Ç @send –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.", reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, handle_payment_receipt_step, order_summary, total_amount)
    else:
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã.")
        bot.register_next_step_handler(message, handle_payment_method_step, order_summary, total_amount)

def handle_payment_receipt_step(message, order_summary, total_amount):
    chat_id = message.chat.id
    receipt_photo = message.photo[-1].file_id if message.photo else None

    if not receipt_photo:
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —á–µ–∫–∞.")
        bot.register_next_step_handler(message, handle_payment_receipt_step, order_summary, total_amount)
        return

    bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è.")
    bot.register_next_step_handler(message, handle_name_step, order_summary, total_amount, receipt_photo)

def handle_name_step(message, order_summary, total_amount, receipt_photo):
    chat_id = message.chat.id
    user_name = message.text

    bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å.")
    bot.register_next_step_handler(message, handle_address_step, order_summary, total_amount, receipt_photo, user_name)

def handle_address_step(message, order_summary, total_amount, receipt_photo, user_name):
    chat_id = message.chat.id
    address = message.text

    bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
    bot.register_next_step_handler(message, handle_phone_step, order_summary, total_amount, receipt_photo, user_name, address)

def handle_phone_step(message, order_summary, total_amount, receipt_photo, user_name, address):
    chat_id = message.chat.id
    phone = message.text

    order_details = {
        'order_summary': order_summary,
        'total_amount': total_amount,
        'name': user_name,
        'address': address,
        'phone': phone
    }

    save_order(chat_id, order_details)
    clear_cart(chat_id)

    bot.send_message(chat_id, "–í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!")
    admin_chat_id = GROUP_ID
    formatted_order_details = (
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} –æ—Ñ–æ—Ä–º–∏–ª –∑–∞–∫–∞–∑:\n\n"
        f"–¢–æ–≤–∞—Ä—ã:\n{order_summary}\n\n"
        f"–ò—Ç–æ–≥–æ: {total_amount:.2f} —Ç–≥.\n"
        f"–ò–º—è: {user_name}\n"
        f"–ê–¥—Ä–µ—Å: {address}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}"
    )
    bot.send_message(admin_chat_id, formatted_order_details)


def handle_payment_receipt_step(message, order_summary, total_amount):
    chat_id = message.chat.id
    receipt_photo = message.photo[-1].file_id if message.photo else None

    if not receipt_photo:
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —á–µ–∫–∞.")
        bot.register_next_step_handler(message, handle_payment_receipt_step, order_summary, total_amount)
        return

    bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è.")
    bot.register_next_step_handler(message, handle_name_step, order_summary, total_amount, receipt_photo)

def handle_name_step(message, order_summary, total_amount, receipt_photo):
    chat_id = message.chat.id
    user_name = message.text

    bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å.")
    bot.register_next_step_handler(message, handle_address_step, order_summary, total_amount, receipt_photo, user_name)

def handle_address_step(message, order_summary, total_amount, receipt_photo, user_name):
    chat_id = message.chat.id
    address = message.text

    bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
    bot.register_next_step_handler(message, handle_phone_step, order_summary, total_amount, receipt_photo, user_name, address)

def handle_phone_step(message, order_summary, total_amount, receipt_photo, user_name, address):
    chat_id = message.chat.id
    phone = message.text

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞
    order_details = {
        'order_summary': order_summary,
        'total_amount': total_amount,
        'name': user_name,
        'address': address,
        'phone': phone
    }

    save_order(chat_id, order_details)
    clear_cart(chat_id)

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–∫–∞–∑–∞
    formatted_order_details = (
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} –æ—Ñ–æ—Ä–º–∏–ª –∑–∞–∫–∞–∑:\n\n"
        f"–¢–æ–≤–∞—Ä—ã:\n{order_summary}\n\n"
        f"–ò—Ç–æ–≥–æ: {total_amount:.2f} —Ç–≥.\n"
        f"–ò–º—è: {user_name}\n"
        f"–ê–¥—Ä–µ—Å: {address}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Ñ–æ—Ç–æ —á–µ–∫–∞ –≤ –≥—Ä—É–ø–ø—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    admin_chat_id = GROUP_ID
    if isinstance(admin_chat_id, list):
        admin_chat_id = admin_chat_id[0]  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ –æ–¥–Ω–æ —á–∏—Å–ª–æ

    try:
        bot.send_message(admin_chat_id, formatted_order_details)
        bot.send_photo(admin_chat_id, receipt_photo, caption="–§–æ—Ç–æ —á–µ–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        bot.send_message(chat_id, "–í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!")
    except Exception as e:
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –≥—Ä—É–ø–ø—É.")
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –≥—Ä—É–ø–ø—É: {e}")



@bot.callback_query_handler(func=lambda call: call.data.startswith("pay_by_"))
def handle_payment_method(call):
    chat_id = call.message.chat.id
    if call.data == "pay_by_card":
        bot.send_message(chat_id,
                         "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –æ –ø–ª–∞—Ç–µ–∂–µ.",
                         reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(call.message, handle_payment_receipt)
    elif call.data == "pay_by_crypto":
        bot.send_message(chat_id,
                         "–î–ª—è –æ–ø–ª–∞—Ç—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –±–æ—Ç @send –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –æ–ø–ª–∞—Ç—É. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –æ –ø–ª–∞—Ç–µ–∂–µ.",
                         reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(call.message, handle_payment_receipt)

def handle_payment_receipt(message, order_summary, total_amount):
    chat_id = message.chat.id
    receipt_photo = message.photo[-1].file_id if message.photo else None

    if not receipt_photo:
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —á–µ–∫–∞.")
        bot.register_next_step_handler(message, handle_payment_receipt, order_summary, total_amount)
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —á–µ–∫–∞ –≤ –≥—Ä—É–ø–ø—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    admin_chat_id = GROUP_ID
    if isinstance(admin_chat_id, list):
        admin_chat_id = admin_chat_id[0]  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ –æ–¥–Ω–æ —á–∏—Å–ª–æ

    bot.send_photo(admin_chat_id, receipt_photo, caption="–§–æ—Ç–æ —á–µ–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

    bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è.")
    bot.register_next_step_handler(message, handle_name_step, order_summary, total_amount, receipt_photo)


@bot.callback_query_handler(func=lambda call: call.data.startswith("confirm_order_"))
def handle_confirm_order(call):
    try:
        data = call.data.split('_')
        if len(data) != 3 or data[0] != 'confirm' or data[1] != 'order':
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.")

        product_id = int(data[2])
        logging.info(f"Confirming order for product_id: {product_id}")

        chat_id = call.message.chat.id
        user_info = get_user_info(chat_id)
        if not user_info:
            bot.send_message(chat_id, "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.")
            return

        username = user_info.get('username', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')

        with psycopg2.connect(user=DB_USER, password=DB_PASSWORD, host=DB_HOST, port=DB_PORT, database=DB_NAME) as connection:
            with connection.cursor() as cursor:
                cursor.execute("SELECT * FROM products WHERE id = %s", (product_id,))
                product = cursor.fetchone()

                if product:
                    product_name = product[1]
                    product_price = product[3]

                    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
                    order_details = {
                        'order_summary': f"{product_name} - {product_price} —Ç–≥.",
                        'total_amount': str(product_price),  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
                        'username': username
                    }
                    save_order(chat_id, order_details)

                    bot.send_message(chat_id, "–í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!")

                    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                    admin_chat_id = GROUP_ID
                    if isinstance(admin_chat_id, list):
                        admin_chat_id = admin_chat_id[0]  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ –æ–¥–Ω–æ —á–∏—Å–ª–æ
                    logging.info(f"Sending order details to admin chat_id: {admin_chat_id}")
                    bot.send_message(admin_chat_id, f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑:\n\n{order_details}")

                else:
                    bot.send_message(chat_id, "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except ValueError as e:
        bot.send_message(chat_id, f"–û—à–∏–±–∫–∞: {str(e)}")
    except (Exception, psycopg2.Error) as error:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {error}")
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.")

@bot.callback_query_handler(func=lambda call: call.data == "cancel_order")
def handle_cancel_order(call):
    bot.send_message(call.message.chat.id, "–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.")



# --------------------------------------------------------------------------------------------------------


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–ø–ª–∞—Ç—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π

@bot.message_handler(func=lambda message: message.text == "–û–ø–ª–∞—Ç–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π")
def pay_with_crypto(message):
    instructions = """
    –í—ã–±—Ä–∞–Ω —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –Ω–∞ —ç–∫—Ä–∞–Ω–µ:

    1. –û—Ç–∫—Ä–æ–π—Ç–µ –±–æ—Ç–∞ @send –≤ Telegram.
    2. –í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è –æ–ø–ª–∞—Ç—ã.
    3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è.
    4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –Ω–∞ —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å.
    5. –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—é–¥–∞ —á–µ–∫ –æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞.
    """

    bot.send_message(message.chat.id, instructions, parse_mode='HTML', reply_markup=types.ReplyKeyboardRemove())


@bot.message_handler(content_types=['photo'])
def handle_payment_receipt(message):
    chat_id = message.chat.id

    logging.info(f"Received photo from chat_id {chat_id}")

    if is_user_registered(chat_id):
        user_info = get_user_info(chat_id)
        if user_info is None:
            logging.error("Failed to get user info.")
            bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.")
            return

        items = get_cart_items(chat_id)
        if not items:
            logging.info("Cart is empty.")
            bot.send_message(chat_id, "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
            return

        order_summary = []
        total_amount = 0
        for item in items:
            product_id, name, price, quantity = item
            try:
                price = float(price)
                quantity = int(quantity)
                total_amount += price * quantity
                order_summary.append(f"{name} - {quantity} —à—Ç. - {price} —Ç–≥. –∑–∞ —à—Ç.")
            except ValueError:
                order_summary.append(f"{name} - {quantity} —à—Ç.")

        order_summary_text = "\n".join(order_summary)
        order_details = {
            'order_summary': order_summary_text,
            'total_amount': total_amount,
            'name': user_info.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
            'address': user_info.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
            'phone': user_info.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        }

        try:
            save_order(chat_id, order_details)
            logging.info("Order saved successfully.")
        except Exception as e:
            logging.error(f"Failed to save order: {e}")

        admin_chat_id = GROUP_ID
        bot.forward_message(admin_chat_id, chat_id, message.message_id)
        bot.send_message(admin_chat_id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø–ª–∞—Ç–∏–ª –∑–∞–∫–∞–∑:\n\n{order_details}")

        bot.send_message(chat_id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –í–∞—à —á–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    else:
        bot.send_message(chat_id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")


# --------------------------------------------------------------------------------------------------------

@bot.callback_query_handler(func=lambda call: call.data.startswith("add_to_cart_"))
def handle_add_to_cart(call):
    try:
        # –ü–æ–ª—É—á–∞–µ–º product_id –∏–∑ callback_data
        data = call.data.split('_')
        logging.info(f"Callback data: {data}")

        if len(data) != 4 or data[0] != 'add' or data[1] != 'to' or data[2] != 'cart':
            logging.error("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data.")
            bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
            return

        product_id_str = data[3]
        logging.info(f"Extracted product_id_str: {product_id_str}")

        try:
            product_id = int(product_id_str)
            logging.info(f"Converted product_id: {product_id}")
        except ValueError as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è product_id: {e}")
            bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–æ–≤–∞—Ä–∞.")
            return

        chat_id = call.message.chat.id  # –ü–æ–ª—É—á–∞–µ–º chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        logging.info(f"Handling add to cart for user {chat_id} and product {product_id}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ç–∞–±–ª–∏—Ü–µ users
        with psycopg2.connect(user=DB_USER, password=DB_PASSWORD, host=DB_HOST, port=DB_PORT,
                              database=DB_NAME) as connection:
            with connection.cursor() as cursor:
                cursor.execute("SELECT * FROM users WHERE chat_id = %s", (chat_id,))
                user = cursor.fetchone()

                if user:
                    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É
                    add_to_cart(chat_id, product_id)

                    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ä–∑–∏–Ω—É"
                    markup = types.InlineKeyboardMarkup()
                    view_cart_button = types.InlineKeyboardButton(
                        "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ä–∑–∏–Ω—É",
                        callback_data="view_cart"
                    )
                    markup.add(view_cart_button)

                    bot.send_message(
                        chat_id,
                        f"–¢–æ–≤–∞—Ä —Å ID {product_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É.",
                        reply_markup=markup
                    )
                else:
                    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    bot.send_message(chat_id, "–û—à–∏–±–∫–∞: –≤—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
    except (Exception, psycopg2.Error) as error:
        logging.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: %s", error)
        bot.send_message(call.message.chat.id,
                         "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@bot.callback_query_handler(func=lambda call: call.data == "view_cart")
def handle_view_cart(call):
    chat_id = call.message.chat.id
    logging.info(f"User {chat_id} requested to view cart")

    items = get_cart_items(chat_id)
    if items:
        response = "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n ----------------- \n"
        total_amount = 0
        markup = types.InlineKeyboardMarkup()

        for item in items:
            product_id, name, price, quantity = item
            try:
                price = float(price)
                quantity = int(quantity)
                total_amount += price * quantity
                response += (f" {name} "
                             f"\n –ö–æ–ª-–≤–æ: {quantity} —à—Ç."
                             f"\n –¶–µ–Ω–∞: {price} —Ç–≥. –∑–∞ —à—Ç.\n")
            except ValueError:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {product_id}.")
                response += f"{name} - {quantity} —à—Ç.\n"

        response += f" ----------------- \n–ò—Ç–æ–≥–æ: {total_amount:.2f} —Ç–≥."

        clear_cart_button = types.InlineKeyboardButton("–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clear_cart")
        checkout_button = types.InlineKeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="order_0")  # –ü–µ—Ä–µ–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
        markup.add(clear_cart_button, checkout_button)

        bot.send_message(chat_id, response, reply_markup=markup)
    else:
        bot.send_message(chat_id, "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")


@bot.callback_query_handler(func=lambda call: call.data == "clear_cart")
def handle_clear_cart(call):
    chat_id = call.message.chat.id
    logging.info(f"User {chat_id} requested to clear cart")

    try:
        clear_cart(chat_id)
        bot.send_message(chat_id, "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –±—ã–ª–∞ –æ—á–∏—â–µ–Ω–∞.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ—Ä–∑–∏–Ω—ã: {e}")
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ—Ä–∑–∏–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")







# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /admin
@bot.message_handler(commands=['admin'])
def admin_commands(message):
    if str(message.chat.id) in ADMIN_IDS:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton('/add_category'))
        markup.add(types.KeyboardButton('/add_product'))
        # markup.add(types.KeyboardButton('/edit_product'))
        markup.add(types.KeyboardButton('/delete_product'))
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")





# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# def start_bot():
#     while True:
#         try:
#             logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
#             bot.polling(none_stop=True, interval=0, timeout=20)
#         except apihelper.ApiTelegramException as e:
#             if e.result.status_code == 409:
#                 logging.error("–û—à–∏–±–∫–∞ 409: –ö–æ–Ω—Ñ–ª–∏–∫—Ç. –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ.")
#                 break  # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ü–∏–∫–ª, –µ—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ 409
#             else:
#                 logging.error(f"ApiTelegramException: {e}")
#                 time.sleep(5)
#         except Exception as e:
#             logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
#             time.sleep(5)




if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    bot.polling(none_stop=True, interval=0, timeout=60)
    # logging.basicConfig(level=logging.INFO)
    # start_bot()







